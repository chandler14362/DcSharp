//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /Users/chandlerstowell/Documents/git/DcSharp/Grammar/DcParser.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace DcSharp {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class DcParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		DCLASS=1, STRUCT=2, TYPEDEF=3, KEYWORD=4, FROM=5, IMPORT=6, HISTORIC_KW=7, 
		BUILTIN_TYPE=8, STAR=9, FWSLASH=10, MODULUS=11, PERIOD=12, LPAREN=13, 
		RPAREN=14, HYPEN=15, COMMA=16, LSBRACKET=17, RSBRACKET=18, LBRACKET=19, 
		RBRACKET=20, SINGLE_QUOTE=21, DOUBLE_QUOTE=22, EQUALS=23, SEMICOLON=24, 
		COLON=25, DOUBLE_QUOTED_STRING=26, QUOTED_CHAR=27, SINGLE_QUOTED_STRING=28, 
		IDENTIFIER=29, NUMBER=30, CHAR=31, SINGLE_LINE_COMMENT=32, WS=33, STAR_IMPORT=34;
	public const int
		RULE_init = 0, RULE_dc_declaration = 1, RULE_import_statement = 2, RULE_module_path = 3, 
		RULE_module_name = 4, RULE_module_extension = 5, RULE_class_declaration = 6, 
		RULE_parent_class_list = 7, RULE_class_field = 8, RULE_struct_declaration = 9, 
		RULE_struct_field = 10, RULE_atomic_field = 11, RULE_field_parameters = 12, 
		RULE_molecular_field = 13, RULE_molecular_field_members = 14, RULE_keyword_declaration = 15, 
		RULE_keyword_list = 16, RULE_typedef_declaration = 17, RULE_parameter = 18, 
		RULE_array_specification = 19, RULE_parameter_range = 20, RULE_range_arguments = 21, 
		RULE_range_argument = 22, RULE_default_value = 23, RULE_value_constant = 24, 
		RULE_number_constant = 25, RULE_string_constant = 26, RULE_struct_constant = 27, 
		RULE_array_constant = 28, RULE_array_value_constant = 29;
	public static readonly string[] ruleNames = {
		"init", "dc_declaration", "import_statement", "module_path", "module_name", 
		"module_extension", "class_declaration", "parent_class_list", "class_field", 
		"struct_declaration", "struct_field", "atomic_field", "field_parameters", 
		"molecular_field", "molecular_field_members", "keyword_declaration", "keyword_list", 
		"typedef_declaration", "parameter", "array_specification", "parameter_range", 
		"range_arguments", "range_argument", "default_value", "value_constant", 
		"number_constant", "string_constant", "struct_constant", "array_constant", 
		"array_value_constant"
	};

	private static readonly string[] _LiteralNames = {
		null, "'dclass'", "'struct'", "'typedef'", "'keyword'", "'from'", "'import'", 
		null, null, "'*'", "'/'", "'%'", "'.'", "'('", "')'", "'-'", "','", "'['", 
		"']'", "'{'", "'}'", "'''", "'\"'", "'='", "';'", "':'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "DCLASS", "STRUCT", "TYPEDEF", "KEYWORD", "FROM", "IMPORT", "HISTORIC_KW", 
		"BUILTIN_TYPE", "STAR", "FWSLASH", "MODULUS", "PERIOD", "LPAREN", "RPAREN", 
		"HYPEN", "COMMA", "LSBRACKET", "RSBRACKET", "LBRACKET", "RBRACKET", "SINGLE_QUOTE", 
		"DOUBLE_QUOTE", "EQUALS", "SEMICOLON", "COLON", "DOUBLE_QUOTED_STRING", 
		"QUOTED_CHAR", "SINGLE_QUOTED_STRING", "IDENTIFIER", "NUMBER", "CHAR", 
		"SINGLE_LINE_COMMENT", "WS", "STAR_IMPORT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "DcParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static DcParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public DcParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public DcParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class InitContext : ParserRuleContext {
		public Import_statementContext[] import_statement() {
			return GetRuleContexts<Import_statementContext>();
		}
		public Import_statementContext import_statement(int i) {
			return GetRuleContext<Import_statementContext>(i);
		}
		public Dc_declarationContext[] dc_declaration() {
			return GetRuleContexts<Dc_declarationContext>();
		}
		public Dc_declarationContext dc_declaration(int i) {
			return GetRuleContext<Dc_declarationContext>(i);
		}
		public InitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_init; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDcParserListener typedListener = listener as IDcParserListener;
			if (typedListener != null) typedListener.EnterInit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDcParserListener typedListener = listener as IDcParserListener;
			if (typedListener != null) typedListener.ExitInit(this);
		}
	}

	[RuleVersion(0)]
	public InitContext init() {
		InitContext _localctx = new InitContext(Context, State);
		EnterRule(_localctx, 0, RULE_init);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 63;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==FROM || _la==IMPORT) {
				{
				{
				State = 60; import_statement();
				}
				}
				State = 65;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 69;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DCLASS) | (1L << STRUCT) | (1L << TYPEDEF) | (1L << KEYWORD))) != 0)) {
				{
				{
				State = 66; dc_declaration();
				}
				}
				State = 71;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dc_declarationContext : ParserRuleContext {
		public ITerminalNode SEMICOLON() { return GetToken(DcParser.SEMICOLON, 0); }
		public Typedef_declarationContext typedef_declaration() {
			return GetRuleContext<Typedef_declarationContext>(0);
		}
		public Class_declarationContext class_declaration() {
			return GetRuleContext<Class_declarationContext>(0);
		}
		public Struct_declarationContext struct_declaration() {
			return GetRuleContext<Struct_declarationContext>(0);
		}
		public Keyword_declarationContext keyword_declaration() {
			return GetRuleContext<Keyword_declarationContext>(0);
		}
		public Dc_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dc_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDcParserListener typedListener = listener as IDcParserListener;
			if (typedListener != null) typedListener.EnterDc_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDcParserListener typedListener = listener as IDcParserListener;
			if (typedListener != null) typedListener.ExitDc_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Dc_declarationContext dc_declaration() {
		Dc_declarationContext _localctx = new Dc_declarationContext(Context, State);
		EnterRule(_localctx, 2, RULE_dc_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 76;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TYPEDEF:
				{
				State = 72; typedef_declaration();
				}
				break;
			case DCLASS:
				{
				State = 73; class_declaration();
				}
				break;
			case STRUCT:
				{
				State = 74; struct_declaration();
				}
				break;
			case KEYWORD:
				{
				State = 75; keyword_declaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 78; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Import_statementContext : ParserRuleContext {
		public ITerminalNode FROM() { return GetToken(DcParser.FROM, 0); }
		public Module_pathContext module_path() {
			return GetRuleContext<Module_pathContext>(0);
		}
		public ITerminalNode IMPORT() { return GetToken(DcParser.IMPORT, 0); }
		public Module_nameContext module_name() {
			return GetRuleContext<Module_nameContext>(0);
		}
		public Module_extensionContext module_extension() {
			return GetRuleContext<Module_extensionContext>(0);
		}
		public Import_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_import_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDcParserListener typedListener = listener as IDcParserListener;
			if (typedListener != null) typedListener.EnterImport_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDcParserListener typedListener = listener as IDcParserListener;
			if (typedListener != null) typedListener.ExitImport_statement(this);
		}
	}

	[RuleVersion(0)]
	public Import_statementContext import_statement() {
		Import_statementContext _localctx = new Import_statementContext(Context, State);
		EnterRule(_localctx, 4, RULE_import_statement);
		int _la;
		try {
			State = 90;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FROM:
				EnterOuterAlt(_localctx, 1);
				{
				State = 80; Match(FROM);
				State = 81; module_path();
				State = 82; Match(IMPORT);
				State = 83; module_name();
				}
				break;
			case IMPORT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 85; Match(IMPORT);
				State = 86; module_path();
				State = 88;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FWSLASH) {
					{
					State = 87; module_extension();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Module_pathContext : ParserRuleContext {
		public ITerminalNode[] IDENTIFIER() { return GetTokens(DcParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(DcParser.IDENTIFIER, i);
		}
		public ITerminalNode[] PERIOD() { return GetTokens(DcParser.PERIOD); }
		public ITerminalNode PERIOD(int i) {
			return GetToken(DcParser.PERIOD, i);
		}
		public Module_pathContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_module_path; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDcParserListener typedListener = listener as IDcParserListener;
			if (typedListener != null) typedListener.EnterModule_path(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDcParserListener typedListener = listener as IDcParserListener;
			if (typedListener != null) typedListener.ExitModule_path(this);
		}
	}

	[RuleVersion(0)]
	public Module_pathContext module_path() {
		Module_pathContext _localctx = new Module_pathContext(Context, State);
		EnterRule(_localctx, 6, RULE_module_path);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 92; Match(IDENTIFIER);
			State = 97;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==PERIOD) {
				{
				{
				State = 93; Match(PERIOD);
				State = 94; Match(IDENTIFIER);
				}
				}
				State = 99;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Module_nameContext : ParserRuleContext {
		public ITerminalNode STAR_IMPORT() { return GetToken(DcParser.STAR_IMPORT, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(DcParser.IDENTIFIER, 0); }
		public Module_extensionContext module_extension() {
			return GetRuleContext<Module_extensionContext>(0);
		}
		public Module_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_module_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDcParserListener typedListener = listener as IDcParserListener;
			if (typedListener != null) typedListener.EnterModule_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDcParserListener typedListener = listener as IDcParserListener;
			if (typedListener != null) typedListener.ExitModule_name(this);
		}
	}

	[RuleVersion(0)]
	public Module_nameContext module_name() {
		Module_nameContext _localctx = new Module_nameContext(Context, State);
		EnterRule(_localctx, 8, RULE_module_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 105;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STAR_IMPORT:
				{
				State = 100; Match(STAR_IMPORT);
				}
				break;
			case IDENTIFIER:
				{
				{
				State = 101; Match(IDENTIFIER);
				State = 103;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FWSLASH) {
					{
					State = 102; module_extension();
					}
				}

				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Module_extensionContext : ParserRuleContext {
		public ITerminalNode[] FWSLASH() { return GetTokens(DcParser.FWSLASH); }
		public ITerminalNode FWSLASH(int i) {
			return GetToken(DcParser.FWSLASH, i);
		}
		public ITerminalNode[] IDENTIFIER() { return GetTokens(DcParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(DcParser.IDENTIFIER, i);
		}
		public Module_extensionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_module_extension; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDcParserListener typedListener = listener as IDcParserListener;
			if (typedListener != null) typedListener.EnterModule_extension(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDcParserListener typedListener = listener as IDcParserListener;
			if (typedListener != null) typedListener.ExitModule_extension(this);
		}
	}

	[RuleVersion(0)]
	public Module_extensionContext module_extension() {
		Module_extensionContext _localctx = new Module_extensionContext(Context, State);
		EnterRule(_localctx, 10, RULE_module_extension);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 109;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 107; Match(FWSLASH);
				State = 108; Match(IDENTIFIER);
				}
				}
				State = 111;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==FWSLASH );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_declarationContext : ParserRuleContext {
		public IToken name;
		public Parent_class_listContext parents;
		public ITerminalNode DCLASS() { return GetToken(DcParser.DCLASS, 0); }
		public ITerminalNode LBRACKET() { return GetToken(DcParser.LBRACKET, 0); }
		public ITerminalNode RBRACKET() { return GetToken(DcParser.RBRACKET, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(DcParser.IDENTIFIER, 0); }
		public ITerminalNode COLON() { return GetToken(DcParser.COLON, 0); }
		public Class_fieldContext[] class_field() {
			return GetRuleContexts<Class_fieldContext>();
		}
		public Class_fieldContext class_field(int i) {
			return GetRuleContext<Class_fieldContext>(i);
		}
		public ITerminalNode[] SEMICOLON() { return GetTokens(DcParser.SEMICOLON); }
		public ITerminalNode SEMICOLON(int i) {
			return GetToken(DcParser.SEMICOLON, i);
		}
		public Parent_class_listContext parent_class_list() {
			return GetRuleContext<Parent_class_listContext>(0);
		}
		public Class_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDcParserListener typedListener = listener as IDcParserListener;
			if (typedListener != null) typedListener.EnterClass_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDcParserListener typedListener = listener as IDcParserListener;
			if (typedListener != null) typedListener.ExitClass_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Class_declarationContext class_declaration() {
		Class_declarationContext _localctx = new Class_declarationContext(Context, State);
		EnterRule(_localctx, 12, RULE_class_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 113; Match(DCLASS);
			State = 114; _localctx.name = Match(IDENTIFIER);
			State = 117;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 115; Match(COLON);
				State = 116; _localctx.parents = parent_class_list();
				}
			}

			State = 119; Match(LBRACKET);
			State = 125;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IDENTIFIER) {
				{
				{
				State = 120; class_field();
				State = 121; Match(SEMICOLON);
				}
				}
				State = 127;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 128; Match(RBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parent_class_listContext : ParserRuleContext {
		public IToken name;
		public Parent_class_listContext next;
		public ITerminalNode IDENTIFIER() { return GetToken(DcParser.IDENTIFIER, 0); }
		public ITerminalNode COMMA() { return GetToken(DcParser.COMMA, 0); }
		public Parent_class_listContext parent_class_list() {
			return GetRuleContext<Parent_class_listContext>(0);
		}
		public Parent_class_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parent_class_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDcParserListener typedListener = listener as IDcParserListener;
			if (typedListener != null) typedListener.EnterParent_class_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDcParserListener typedListener = listener as IDcParserListener;
			if (typedListener != null) typedListener.ExitParent_class_list(this);
		}
	}

	[RuleVersion(0)]
	public Parent_class_listContext parent_class_list() {
		Parent_class_listContext _localctx = new Parent_class_listContext(Context, State);
		EnterRule(_localctx, 14, RULE_parent_class_list);
		try {
			State = 134;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 130; _localctx.name = Match(IDENTIFIER);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 131; _localctx.name = Match(IDENTIFIER);
				State = 132; Match(COMMA);
				State = 133; _localctx.next = parent_class_list();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_fieldContext : ParserRuleContext {
		public Atomic_fieldContext atomic_field() {
			return GetRuleContext<Atomic_fieldContext>(0);
		}
		public Molecular_fieldContext molecular_field() {
			return GetRuleContext<Molecular_fieldContext>(0);
		}
		public Class_fieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_field; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDcParserListener typedListener = listener as IDcParserListener;
			if (typedListener != null) typedListener.EnterClass_field(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDcParserListener typedListener = listener as IDcParserListener;
			if (typedListener != null) typedListener.ExitClass_field(this);
		}
	}

	[RuleVersion(0)]
	public Class_fieldContext class_field() {
		Class_fieldContext _localctx = new Class_fieldContext(Context, State);
		EnterRule(_localctx, 16, RULE_class_field);
		try {
			State = 138;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 136; atomic_field();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 137; molecular_field();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_declarationContext : ParserRuleContext {
		public IToken name;
		public ITerminalNode STRUCT() { return GetToken(DcParser.STRUCT, 0); }
		public ITerminalNode LBRACKET() { return GetToken(DcParser.LBRACKET, 0); }
		public ITerminalNode RBRACKET() { return GetToken(DcParser.RBRACKET, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(DcParser.IDENTIFIER, 0); }
		public Struct_fieldContext[] struct_field() {
			return GetRuleContexts<Struct_fieldContext>();
		}
		public Struct_fieldContext struct_field(int i) {
			return GetRuleContext<Struct_fieldContext>(i);
		}
		public ITerminalNode[] SEMICOLON() { return GetTokens(DcParser.SEMICOLON); }
		public ITerminalNode SEMICOLON(int i) {
			return GetToken(DcParser.SEMICOLON, i);
		}
		public Struct_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDcParserListener typedListener = listener as IDcParserListener;
			if (typedListener != null) typedListener.EnterStruct_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDcParserListener typedListener = listener as IDcParserListener;
			if (typedListener != null) typedListener.ExitStruct_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Struct_declarationContext struct_declaration() {
		Struct_declarationContext _localctx = new Struct_declarationContext(Context, State);
		EnterRule(_localctx, 18, RULE_struct_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 140; Match(STRUCT);
			State = 141; _localctx.name = Match(IDENTIFIER);
			State = 142; Match(LBRACKET);
			State = 148;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==BUILTIN_TYPE || _la==IDENTIFIER) {
				{
				{
				State = 143; struct_field();
				State = 144; Match(SEMICOLON);
				}
				}
				State = 150;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 151; Match(RBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_fieldContext : ParserRuleContext {
		public ParameterContext p;
		public Class_fieldContext class_field() {
			return GetRuleContext<Class_fieldContext>(0);
		}
		public ParameterContext parameter() {
			return GetRuleContext<ParameterContext>(0);
		}
		public Struct_fieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_field; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDcParserListener typedListener = listener as IDcParserListener;
			if (typedListener != null) typedListener.EnterStruct_field(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDcParserListener typedListener = listener as IDcParserListener;
			if (typedListener != null) typedListener.ExitStruct_field(this);
		}
	}

	[RuleVersion(0)]
	public Struct_fieldContext struct_field() {
		Struct_fieldContext _localctx = new Struct_fieldContext(Context, State);
		EnterRule(_localctx, 20, RULE_struct_field);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 155;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				{
				State = 153; class_field();
				}
				break;
			case 2:
				{
				State = 154; _localctx.p = parameter();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Atomic_fieldContext : ParserRuleContext {
		public IToken name;
		public Field_parametersContext parameters;
		public Keyword_listContext keywords;
		public ITerminalNode LPAREN() { return GetToken(DcParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(DcParser.RPAREN, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(DcParser.IDENTIFIER, 0); }
		public Field_parametersContext field_parameters() {
			return GetRuleContext<Field_parametersContext>(0);
		}
		public Keyword_listContext keyword_list() {
			return GetRuleContext<Keyword_listContext>(0);
		}
		public Atomic_fieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atomic_field; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDcParserListener typedListener = listener as IDcParserListener;
			if (typedListener != null) typedListener.EnterAtomic_field(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDcParserListener typedListener = listener as IDcParserListener;
			if (typedListener != null) typedListener.ExitAtomic_field(this);
		}
	}

	[RuleVersion(0)]
	public Atomic_fieldContext atomic_field() {
		Atomic_fieldContext _localctx = new Atomic_fieldContext(Context, State);
		EnterRule(_localctx, 22, RULE_atomic_field);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 157; _localctx.name = Match(IDENTIFIER);
			State = 158; Match(LPAREN);
			State = 160;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BUILTIN_TYPE || _la==IDENTIFIER) {
				{
				State = 159; _localctx.parameters = field_parameters();
				}
			}

			State = 162; Match(RPAREN);
			State = 164;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==HISTORIC_KW || _la==IDENTIFIER) {
				{
				State = 163; _localctx.keywords = keyword_list();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Field_parametersContext : ParserRuleContext {
		public ParameterContext p;
		public Field_parametersContext next;
		public ParameterContext parameter() {
			return GetRuleContext<ParameterContext>(0);
		}
		public ITerminalNode COMMA() { return GetToken(DcParser.COMMA, 0); }
		public Field_parametersContext field_parameters() {
			return GetRuleContext<Field_parametersContext>(0);
		}
		public Field_parametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field_parameters; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDcParserListener typedListener = listener as IDcParserListener;
			if (typedListener != null) typedListener.EnterField_parameters(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDcParserListener typedListener = listener as IDcParserListener;
			if (typedListener != null) typedListener.ExitField_parameters(this);
		}
	}

	[RuleVersion(0)]
	public Field_parametersContext field_parameters() {
		Field_parametersContext _localctx = new Field_parametersContext(Context, State);
		EnterRule(_localctx, 24, RULE_field_parameters);
		try {
			State = 171;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 166; _localctx.p = parameter();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 167; _localctx.p = parameter();
				State = 168; Match(COMMA);
				State = 169; _localctx.next = field_parameters();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Molecular_fieldContext : ParserRuleContext {
		public IToken name;
		public Molecular_field_membersContext members;
		public ITerminalNode COLON() { return GetToken(DcParser.COLON, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(DcParser.IDENTIFIER, 0); }
		public Molecular_field_membersContext molecular_field_members() {
			return GetRuleContext<Molecular_field_membersContext>(0);
		}
		public Molecular_fieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_molecular_field; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDcParserListener typedListener = listener as IDcParserListener;
			if (typedListener != null) typedListener.EnterMolecular_field(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDcParserListener typedListener = listener as IDcParserListener;
			if (typedListener != null) typedListener.ExitMolecular_field(this);
		}
	}

	[RuleVersion(0)]
	public Molecular_fieldContext molecular_field() {
		Molecular_fieldContext _localctx = new Molecular_fieldContext(Context, State);
		EnterRule(_localctx, 26, RULE_molecular_field);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 173; _localctx.name = Match(IDENTIFIER);
			State = 174; Match(COLON);
			State = 175; _localctx.members = molecular_field_members();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Molecular_field_membersContext : ParserRuleContext {
		public IToken name;
		public Molecular_field_membersContext next;
		public ITerminalNode IDENTIFIER() { return GetToken(DcParser.IDENTIFIER, 0); }
		public ITerminalNode COMMA() { return GetToken(DcParser.COMMA, 0); }
		public Molecular_field_membersContext molecular_field_members() {
			return GetRuleContext<Molecular_field_membersContext>(0);
		}
		public Molecular_field_membersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_molecular_field_members; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDcParserListener typedListener = listener as IDcParserListener;
			if (typedListener != null) typedListener.EnterMolecular_field_members(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDcParserListener typedListener = listener as IDcParserListener;
			if (typedListener != null) typedListener.ExitMolecular_field_members(this);
		}
	}

	[RuleVersion(0)]
	public Molecular_field_membersContext molecular_field_members() {
		Molecular_field_membersContext _localctx = new Molecular_field_membersContext(Context, State);
		EnterRule(_localctx, 28, RULE_molecular_field_members);
		try {
			State = 181;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 177; _localctx.name = Match(IDENTIFIER);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 178; _localctx.name = Match(IDENTIFIER);
				State = 179; Match(COMMA);
				State = 180; _localctx.next = molecular_field_members();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Keyword_declarationContext : ParserRuleContext {
		public IToken name;
		public ITerminalNode KEYWORD() { return GetToken(DcParser.KEYWORD, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(DcParser.IDENTIFIER, 0); }
		public Keyword_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyword_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDcParserListener typedListener = listener as IDcParserListener;
			if (typedListener != null) typedListener.EnterKeyword_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDcParserListener typedListener = listener as IDcParserListener;
			if (typedListener != null) typedListener.ExitKeyword_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Keyword_declarationContext keyword_declaration() {
		Keyword_declarationContext _localctx = new Keyword_declarationContext(Context, State);
		EnterRule(_localctx, 30, RULE_keyword_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 183; Match(KEYWORD);
			State = 184; _localctx.name = Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Keyword_listContext : ParserRuleContext {
		public IToken keyword;
		public Keyword_listContext next;
		public ITerminalNode IDENTIFIER() { return GetToken(DcParser.IDENTIFIER, 0); }
		public ITerminalNode HISTORIC_KW() { return GetToken(DcParser.HISTORIC_KW, 0); }
		public Keyword_listContext keyword_list() {
			return GetRuleContext<Keyword_listContext>(0);
		}
		public Keyword_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyword_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDcParserListener typedListener = listener as IDcParserListener;
			if (typedListener != null) typedListener.EnterKeyword_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDcParserListener typedListener = listener as IDcParserListener;
			if (typedListener != null) typedListener.ExitKeyword_list(this);
		}
	}

	[RuleVersion(0)]
	public Keyword_listContext keyword_list() {
		Keyword_listContext _localctx = new Keyword_listContext(Context, State);
		EnterRule(_localctx, 32, RULE_keyword_list);
		int _la;
		try {
			State = 189;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 186;
				_localctx.keyword = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==HISTORIC_KW || _la==IDENTIFIER) ) {
					_localctx.keyword = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 187;
				_localctx.keyword = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==HISTORIC_KW || _la==IDENTIFIER) ) {
					_localctx.keyword = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 188; _localctx.next = keyword_list();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Typedef_declarationContext : ParserRuleContext {
		public ParameterContext p;
		public ITerminalNode TYPEDEF() { return GetToken(DcParser.TYPEDEF, 0); }
		public ParameterContext parameter() {
			return GetRuleContext<ParameterContext>(0);
		}
		public Typedef_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typedef_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDcParserListener typedListener = listener as IDcParserListener;
			if (typedListener != null) typedListener.EnterTypedef_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDcParserListener typedListener = listener as IDcParserListener;
			if (typedListener != null) typedListener.ExitTypedef_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Typedef_declarationContext typedef_declaration() {
		Typedef_declarationContext _localctx = new Typedef_declarationContext(Context, State);
		EnterRule(_localctx, 34, RULE_typedef_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 191; Match(TYPEDEF);
			State = 192; _localctx.p = parameter();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		public IToken type;
		public IToken modulus;
		public IToken divisor;
		public IToken name;
		public Array_specificationContext array;
		public ITerminalNode BUILTIN_TYPE() { return GetToken(DcParser.BUILTIN_TYPE, 0); }
		public ITerminalNode[] IDENTIFIER() { return GetTokens(DcParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(DcParser.IDENTIFIER, i);
		}
		public Parameter_rangeContext parameter_range() {
			return GetRuleContext<Parameter_rangeContext>(0);
		}
		public ITerminalNode MODULUS() { return GetToken(DcParser.MODULUS, 0); }
		public ITerminalNode FWSLASH() { return GetToken(DcParser.FWSLASH, 0); }
		public Default_valueContext default_value() {
			return GetRuleContext<Default_valueContext>(0);
		}
		public ITerminalNode[] NUMBER() { return GetTokens(DcParser.NUMBER); }
		public ITerminalNode NUMBER(int i) {
			return GetToken(DcParser.NUMBER, i);
		}
		public Array_specificationContext array_specification() {
			return GetRuleContext<Array_specificationContext>(0);
		}
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDcParserListener typedListener = listener as IDcParserListener;
			if (typedListener != null) typedListener.EnterParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDcParserListener typedListener = listener as IDcParserListener;
			if (typedListener != null) typedListener.ExitParameter(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 36, RULE_parameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 194;
			_localctx.type = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==BUILTIN_TYPE || _la==IDENTIFIER) ) {
				_localctx.type = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 196;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAREN) {
				{
				State = 195; parameter_range();
				}
			}

			State = 200;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MODULUS) {
				{
				State = 198; Match(MODULUS);
				State = 199; _localctx.modulus = Match(NUMBER);
				}
			}

			State = 204;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FWSLASH) {
				{
				State = 202; Match(FWSLASH);
				State = 203; _localctx.divisor = Match(NUMBER);
				}
			}

			State = 207;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENTIFIER) {
				{
				State = 206; _localctx.name = Match(IDENTIFIER);
				}
			}

			State = 210;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LSBRACKET) {
				{
				State = 209; _localctx.array = array_specification();
				}
			}

			State = 213;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQUALS) {
				{
				State = 212; default_value();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Array_specificationContext : ParserRuleContext {
		public Range_argumentContext range;
		public Array_specificationContext next;
		public ITerminalNode LSBRACKET() { return GetToken(DcParser.LSBRACKET, 0); }
		public ITerminalNode RSBRACKET() { return GetToken(DcParser.RSBRACKET, 0); }
		public Range_argumentContext range_argument() {
			return GetRuleContext<Range_argumentContext>(0);
		}
		public Array_specificationContext array_specification() {
			return GetRuleContext<Array_specificationContext>(0);
		}
		public Array_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array_specification; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDcParserListener typedListener = listener as IDcParserListener;
			if (typedListener != null) typedListener.EnterArray_specification(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDcParserListener typedListener = listener as IDcParserListener;
			if (typedListener != null) typedListener.ExitArray_specification(this);
		}
	}

	[RuleVersion(0)]
	public Array_specificationContext array_specification() {
		Array_specificationContext _localctx = new Array_specificationContext(Context, State);
		EnterRule(_localctx, 38, RULE_array_specification);
		int _la;
		try {
			State = 226;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 215; Match(LSBRACKET);
				State = 217;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==QUOTED_CHAR || _la==NUMBER) {
					{
					State = 216; _localctx.range = range_argument();
					}
				}

				State = 219; Match(RSBRACKET);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 220; Match(LSBRACKET);
				State = 222;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==QUOTED_CHAR || _la==NUMBER) {
					{
					State = 221; _localctx.range = range_argument();
					}
				}

				State = 224; Match(RSBRACKET);
				State = 225; _localctx.next = array_specification();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parameter_rangeContext : ParserRuleContext {
		public ITerminalNode LPAREN() { return GetToken(DcParser.LPAREN, 0); }
		public Range_argumentsContext range_arguments() {
			return GetRuleContext<Range_argumentsContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(DcParser.RPAREN, 0); }
		public Parameter_rangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter_range; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDcParserListener typedListener = listener as IDcParserListener;
			if (typedListener != null) typedListener.EnterParameter_range(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDcParserListener typedListener = listener as IDcParserListener;
			if (typedListener != null) typedListener.ExitParameter_range(this);
		}
	}

	[RuleVersion(0)]
	public Parameter_rangeContext parameter_range() {
		Parameter_rangeContext _localctx = new Parameter_rangeContext(Context, State);
		EnterRule(_localctx, 40, RULE_parameter_range);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 228; Match(LPAREN);
			State = 229; range_arguments();
			State = 230; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Range_argumentsContext : ParserRuleContext {
		public Range_argumentContext[] range_argument() {
			return GetRuleContexts<Range_argumentContext>();
		}
		public Range_argumentContext range_argument(int i) {
			return GetRuleContext<Range_argumentContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(DcParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(DcParser.COMMA, i);
		}
		public Range_argumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_range_arguments; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDcParserListener typedListener = listener as IDcParserListener;
			if (typedListener != null) typedListener.EnterRange_arguments(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDcParserListener typedListener = listener as IDcParserListener;
			if (typedListener != null) typedListener.ExitRange_arguments(this);
		}
	}

	[RuleVersion(0)]
	public Range_argumentsContext range_arguments() {
		Range_argumentsContext _localctx = new Range_argumentsContext(Context, State);
		EnterRule(_localctx, 42, RULE_range_arguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 232; range_argument();
			State = 237;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 233; Match(COMMA);
				State = 234; range_argument();
				}
				}
				State = 239;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Range_argumentContext : ParserRuleContext {
		public ITerminalNode[] NUMBER() { return GetTokens(DcParser.NUMBER); }
		public ITerminalNode NUMBER(int i) {
			return GetToken(DcParser.NUMBER, i);
		}
		public ITerminalNode QUOTED_CHAR() { return GetToken(DcParser.QUOTED_CHAR, 0); }
		public ITerminalNode HYPEN() { return GetToken(DcParser.HYPEN, 0); }
		public Range_argumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_range_argument; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDcParserListener typedListener = listener as IDcParserListener;
			if (typedListener != null) typedListener.EnterRange_argument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDcParserListener typedListener = listener as IDcParserListener;
			if (typedListener != null) typedListener.ExitRange_argument(this);
		}
	}

	[RuleVersion(0)]
	public Range_argumentContext range_argument() {
		Range_argumentContext _localctx = new Range_argumentContext(Context, State);
		EnterRule(_localctx, 44, RULE_range_argument);
		try {
			State = 245;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 240; Match(NUMBER);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 241; Match(QUOTED_CHAR);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 242; Match(NUMBER);
				State = 243; Match(HYPEN);
				State = 244; Match(NUMBER);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Default_valueContext : ParserRuleContext {
		public Value_constantContext value;
		public ITerminalNode EQUALS() { return GetToken(DcParser.EQUALS, 0); }
		public Value_constantContext value_constant() {
			return GetRuleContext<Value_constantContext>(0);
		}
		public Default_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_default_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDcParserListener typedListener = listener as IDcParserListener;
			if (typedListener != null) typedListener.EnterDefault_value(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDcParserListener typedListener = listener as IDcParserListener;
			if (typedListener != null) typedListener.ExitDefault_value(this);
		}
	}

	[RuleVersion(0)]
	public Default_valueContext default_value() {
		Default_valueContext _localctx = new Default_valueContext(Context, State);
		EnterRule(_localctx, 46, RULE_default_value);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 247; Match(EQUALS);
			State = 248; _localctx.value = value_constant();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Value_constantContext : ParserRuleContext {
		public Number_constantContext number_constant() {
			return GetRuleContext<Number_constantContext>(0);
		}
		public String_constantContext string_constant() {
			return GetRuleContext<String_constantContext>(0);
		}
		public Struct_constantContext struct_constant() {
			return GetRuleContext<Struct_constantContext>(0);
		}
		public Array_constantContext array_constant() {
			return GetRuleContext<Array_constantContext>(0);
		}
		public Value_constantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value_constant; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDcParserListener typedListener = listener as IDcParserListener;
			if (typedListener != null) typedListener.EnterValue_constant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDcParserListener typedListener = listener as IDcParserListener;
			if (typedListener != null) typedListener.ExitValue_constant(this);
		}
	}

	[RuleVersion(0)]
	public Value_constantContext value_constant() {
		Value_constantContext _localctx = new Value_constantContext(Context, State);
		EnterRule(_localctx, 48, RULE_value_constant);
		try {
			State = 254;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUMBER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 250; number_constant();
				}
				break;
			case DOUBLE_QUOTED_STRING:
			case QUOTED_CHAR:
			case SINGLE_QUOTED_STRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 251; string_constant();
				}
				break;
			case LBRACKET:
				EnterOuterAlt(_localctx, 3);
				{
				State = 252; struct_constant();
				}
				break;
			case RPAREN:
			case COMMA:
			case LSBRACKET:
			case RSBRACKET:
			case RBRACKET:
			case SEMICOLON:
				EnterOuterAlt(_localctx, 4);
				{
				State = 253; array_constant();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Number_constantContext : ParserRuleContext {
		public ITerminalNode NUMBER() { return GetToken(DcParser.NUMBER, 0); }
		public Number_constantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number_constant; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDcParserListener typedListener = listener as IDcParserListener;
			if (typedListener != null) typedListener.EnterNumber_constant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDcParserListener typedListener = listener as IDcParserListener;
			if (typedListener != null) typedListener.ExitNumber_constant(this);
		}
	}

	[RuleVersion(0)]
	public Number_constantContext number_constant() {
		Number_constantContext _localctx = new Number_constantContext(Context, State);
		EnterRule(_localctx, 50, RULE_number_constant);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 256; Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class String_constantContext : ParserRuleContext {
		public ITerminalNode SINGLE_QUOTED_STRING() { return GetToken(DcParser.SINGLE_QUOTED_STRING, 0); }
		public ITerminalNode DOUBLE_QUOTED_STRING() { return GetToken(DcParser.DOUBLE_QUOTED_STRING, 0); }
		public ITerminalNode QUOTED_CHAR() { return GetToken(DcParser.QUOTED_CHAR, 0); }
		public String_constantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string_constant; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDcParserListener typedListener = listener as IDcParserListener;
			if (typedListener != null) typedListener.EnterString_constant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDcParserListener typedListener = listener as IDcParserListener;
			if (typedListener != null) typedListener.ExitString_constant(this);
		}
	}

	[RuleVersion(0)]
	public String_constantContext string_constant() {
		String_constantContext _localctx = new String_constantContext(Context, State);
		EnterRule(_localctx, 52, RULE_string_constant);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 258;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DOUBLE_QUOTED_STRING) | (1L << QUOTED_CHAR) | (1L << SINGLE_QUOTED_STRING))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_constantContext : ParserRuleContext {
		public ITerminalNode LBRACKET() { return GetToken(DcParser.LBRACKET, 0); }
		public Value_constantContext[] value_constant() {
			return GetRuleContexts<Value_constantContext>();
		}
		public Value_constantContext value_constant(int i) {
			return GetRuleContext<Value_constantContext>(i);
		}
		public ITerminalNode RBRACKET() { return GetToken(DcParser.RBRACKET, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(DcParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(DcParser.COMMA, i);
		}
		public Struct_constantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_constant; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDcParserListener typedListener = listener as IDcParserListener;
			if (typedListener != null) typedListener.EnterStruct_constant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDcParserListener typedListener = listener as IDcParserListener;
			if (typedListener != null) typedListener.ExitStruct_constant(this);
		}
	}

	[RuleVersion(0)]
	public Struct_constantContext struct_constant() {
		Struct_constantContext _localctx = new Struct_constantContext(Context, State);
		EnterRule(_localctx, 54, RULE_struct_constant);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 260; Match(LBRACKET);
			State = 261; value_constant();
			State = 266;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 262; Match(COMMA);
				State = 263; value_constant();
				}
				}
				State = 268;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 269; Match(RBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Array_constantContext : ParserRuleContext {
		public ITerminalNode LSBRACKET() { return GetToken(DcParser.LSBRACKET, 0); }
		public Array_value_constantContext[] array_value_constant() {
			return GetRuleContexts<Array_value_constantContext>();
		}
		public Array_value_constantContext array_value_constant(int i) {
			return GetRuleContext<Array_value_constantContext>(i);
		}
		public ITerminalNode RSBRACKET() { return GetToken(DcParser.RSBRACKET, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(DcParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(DcParser.COMMA, i);
		}
		public Array_constantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array_constant; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDcParserListener typedListener = listener as IDcParserListener;
			if (typedListener != null) typedListener.EnterArray_constant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDcParserListener typedListener = listener as IDcParserListener;
			if (typedListener != null) typedListener.ExitArray_constant(this);
		}
	}

	[RuleVersion(0)]
	public Array_constantContext array_constant() {
		Array_constantContext _localctx = new Array_constantContext(Context, State);
		EnterRule(_localctx, 56, RULE_array_constant);
		int _la;
		try {
			State = 283;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case RPAREN:
			case COMMA:
			case RSBRACKET:
			case RBRACKET:
			case SEMICOLON:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case LSBRACKET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 272; Match(LSBRACKET);
				State = 273; array_value_constant();
				State = 278;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 274; Match(COMMA);
					State = 275; array_value_constant();
					}
					}
					State = 280;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 281; Match(RSBRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Array_value_constantContext : ParserRuleContext {
		public IToken v;
		public IToken t;
		public ITerminalNode STAR() { return GetToken(DcParser.STAR, 0); }
		public ITerminalNode[] NUMBER() { return GetTokens(DcParser.NUMBER); }
		public ITerminalNode NUMBER(int i) {
			return GetToken(DcParser.NUMBER, i);
		}
		public Value_constantContext value_constant() {
			return GetRuleContext<Value_constantContext>(0);
		}
		public Array_value_constantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array_value_constant; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDcParserListener typedListener = listener as IDcParserListener;
			if (typedListener != null) typedListener.EnterArray_value_constant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDcParserListener typedListener = listener as IDcParserListener;
			if (typedListener != null) typedListener.ExitArray_value_constant(this);
		}
	}

	[RuleVersion(0)]
	public Array_value_constantContext array_value_constant() {
		Array_value_constantContext _localctx = new Array_value_constantContext(Context, State);
		EnterRule(_localctx, 58, RULE_array_value_constant);
		try {
			State = 290;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 286; _localctx.v = Match(NUMBER);
				State = 287; Match(STAR);
				State = 288; _localctx.t = Match(NUMBER);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 289; value_constant();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '$', '\x127', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x3', 
		'\x2', '\a', '\x2', '@', '\n', '\x2', '\f', '\x2', '\xE', '\x2', '\x43', 
		'\v', '\x2', '\x3', '\x2', '\a', '\x2', '\x46', '\n', '\x2', '\f', '\x2', 
		'\xE', '\x2', 'I', '\v', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x5', '\x3', 'O', '\n', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', '[', '\n', '\x4', 
		'\x5', '\x4', ']', '\n', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\a', '\x5', '\x62', '\n', '\x5', '\f', '\x5', '\xE', '\x5', '\x65', '\v', 
		'\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', 'j', '\n', 
		'\x6', '\x5', '\x6', 'l', '\n', '\x6', '\x3', '\a', '\x3', '\a', '\x6', 
		'\a', 'p', '\n', '\a', '\r', '\a', '\xE', '\a', 'q', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', 'x', '\n', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\a', '\b', '~', '\n', '\b', '\f', 
		'\b', '\xE', '\b', '\x81', '\v', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', '\x89', '\n', 
		'\t', '\x3', '\n', '\x3', '\n', '\x5', '\n', '\x8D', '\n', '\n', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\a', '\v', '\x95', '\n', '\v', '\f', '\v', '\xE', '\v', '\x98', '\v', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', '\x5', '\f', 
		'\x9E', '\n', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x5', '\r', 
		'\xA3', '\n', '\r', '\x3', '\r', '\x3', '\r', '\x5', '\r', '\xA7', '\n', 
		'\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x5', '\xE', '\xAE', '\n', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x5', '\x10', '\xB8', '\n', '\x10', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x5', '\x12', 
		'\xC0', '\n', '\x12', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x14', '\x3', '\x14', '\x5', '\x14', '\xC7', '\n', '\x14', '\x3', '\x14', 
		'\x3', '\x14', '\x5', '\x14', '\xCB', '\n', '\x14', '\x3', '\x14', '\x3', 
		'\x14', '\x5', '\x14', '\xCF', '\n', '\x14', '\x3', '\x14', '\x5', '\x14', 
		'\xD2', '\n', '\x14', '\x3', '\x14', '\x5', '\x14', '\xD5', '\n', '\x14', 
		'\x3', '\x14', '\x5', '\x14', '\xD8', '\n', '\x14', '\x3', '\x15', '\x3', 
		'\x15', '\x5', '\x15', '\xDC', '\n', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x5', '\x15', '\xE1', '\n', '\x15', '\x3', '\x15', '\x3', 
		'\x15', '\x5', '\x15', '\xE5', '\n', '\x15', '\x3', '\x16', '\x3', '\x16', 
		'\x3', '\x16', '\x3', '\x16', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', 
		'\a', '\x17', '\xEE', '\n', '\x17', '\f', '\x17', '\xE', '\x17', '\xF1', 
		'\v', '\x17', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', 
		'\x3', '\x18', '\x5', '\x18', '\xF8', '\n', '\x18', '\x3', '\x19', '\x3', 
		'\x19', '\x3', '\x19', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', 
		'\x1A', '\x5', '\x1A', '\x101', '\n', '\x1A', '\x3', '\x1B', '\x3', '\x1B', 
		'\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', 
		'\x3', '\x1D', '\a', '\x1D', '\x10B', '\n', '\x1D', '\f', '\x1D', '\xE', 
		'\x1D', '\x10E', '\v', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1E', 
		'\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\a', '\x1E', 
		'\x117', '\n', '\x1E', '\f', '\x1E', '\xE', '\x1E', '\x11A', '\v', '\x1E', 
		'\x3', '\x1E', '\x3', '\x1E', '\x5', '\x1E', '\x11E', '\n', '\x1E', '\x3', 
		'\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x5', 
		'\x1F', '\x125', '\n', '\x1F', '\x3', '\x1F', '\x2', '\x2', ' ', '\x2', 
		'\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', 
		'\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', ',', '.', 
		'\x30', '\x32', '\x34', '\x36', '\x38', ':', '<', '\x2', '\x5', '\x4', 
		'\x2', '\t', '\t', '\x1F', '\x1F', '\x4', '\x2', '\n', '\n', '\x1F', '\x1F', 
		'\x3', '\x2', '\x1C', '\x1E', '\x2', '\x132', '\x2', '\x41', '\x3', '\x2', 
		'\x2', '\x2', '\x4', 'N', '\x3', '\x2', '\x2', '\x2', '\x6', '\\', '\x3', 
		'\x2', '\x2', '\x2', '\b', '^', '\x3', '\x2', '\x2', '\x2', '\n', 'k', 
		'\x3', '\x2', '\x2', '\x2', '\f', 'o', '\x3', '\x2', '\x2', '\x2', '\xE', 
		's', '\x3', '\x2', '\x2', '\x2', '\x10', '\x88', '\x3', '\x2', '\x2', 
		'\x2', '\x12', '\x8C', '\x3', '\x2', '\x2', '\x2', '\x14', '\x8E', '\x3', 
		'\x2', '\x2', '\x2', '\x16', '\x9D', '\x3', '\x2', '\x2', '\x2', '\x18', 
		'\x9F', '\x3', '\x2', '\x2', '\x2', '\x1A', '\xAD', '\x3', '\x2', '\x2', 
		'\x2', '\x1C', '\xAF', '\x3', '\x2', '\x2', '\x2', '\x1E', '\xB7', '\x3', 
		'\x2', '\x2', '\x2', ' ', '\xB9', '\x3', '\x2', '\x2', '\x2', '\"', '\xBF', 
		'\x3', '\x2', '\x2', '\x2', '$', '\xC1', '\x3', '\x2', '\x2', '\x2', '&', 
		'\xC4', '\x3', '\x2', '\x2', '\x2', '(', '\xE4', '\x3', '\x2', '\x2', 
		'\x2', '*', '\xE6', '\x3', '\x2', '\x2', '\x2', ',', '\xEA', '\x3', '\x2', 
		'\x2', '\x2', '.', '\xF7', '\x3', '\x2', '\x2', '\x2', '\x30', '\xF9', 
		'\x3', '\x2', '\x2', '\x2', '\x32', '\x100', '\x3', '\x2', '\x2', '\x2', 
		'\x34', '\x102', '\x3', '\x2', '\x2', '\x2', '\x36', '\x104', '\x3', '\x2', 
		'\x2', '\x2', '\x38', '\x106', '\x3', '\x2', '\x2', '\x2', ':', '\x11D', 
		'\x3', '\x2', '\x2', '\x2', '<', '\x124', '\x3', '\x2', '\x2', '\x2', 
		'>', '@', '\x5', '\x6', '\x4', '\x2', '?', '>', '\x3', '\x2', '\x2', '\x2', 
		'@', '\x43', '\x3', '\x2', '\x2', '\x2', '\x41', '?', '\x3', '\x2', '\x2', 
		'\x2', '\x41', '\x42', '\x3', '\x2', '\x2', '\x2', '\x42', 'G', '\x3', 
		'\x2', '\x2', '\x2', '\x43', '\x41', '\x3', '\x2', '\x2', '\x2', '\x44', 
		'\x46', '\x5', '\x4', '\x3', '\x2', '\x45', '\x44', '\x3', '\x2', '\x2', 
		'\x2', '\x46', 'I', '\x3', '\x2', '\x2', '\x2', 'G', '\x45', '\x3', '\x2', 
		'\x2', '\x2', 'G', 'H', '\x3', '\x2', '\x2', '\x2', 'H', '\x3', '\x3', 
		'\x2', '\x2', '\x2', 'I', 'G', '\x3', '\x2', '\x2', '\x2', 'J', 'O', '\x5', 
		'$', '\x13', '\x2', 'K', 'O', '\x5', '\xE', '\b', '\x2', 'L', 'O', '\x5', 
		'\x14', '\v', '\x2', 'M', 'O', '\x5', ' ', '\x11', '\x2', 'N', 'J', '\x3', 
		'\x2', '\x2', '\x2', 'N', 'K', '\x3', '\x2', '\x2', '\x2', 'N', 'L', '\x3', 
		'\x2', '\x2', '\x2', 'N', 'M', '\x3', '\x2', '\x2', '\x2', 'O', 'P', '\x3', 
		'\x2', '\x2', '\x2', 'P', 'Q', '\a', '\x1A', '\x2', '\x2', 'Q', '\x5', 
		'\x3', '\x2', '\x2', '\x2', 'R', 'S', '\a', '\a', '\x2', '\x2', 'S', 'T', 
		'\x5', '\b', '\x5', '\x2', 'T', 'U', '\a', '\b', '\x2', '\x2', 'U', 'V', 
		'\x5', '\n', '\x6', '\x2', 'V', ']', '\x3', '\x2', '\x2', '\x2', 'W', 
		'X', '\a', '\b', '\x2', '\x2', 'X', 'Z', '\x5', '\b', '\x5', '\x2', 'Y', 
		'[', '\x5', '\f', '\a', '\x2', 'Z', 'Y', '\x3', '\x2', '\x2', '\x2', 'Z', 
		'[', '\x3', '\x2', '\x2', '\x2', '[', ']', '\x3', '\x2', '\x2', '\x2', 
		'\\', 'R', '\x3', '\x2', '\x2', '\x2', '\\', 'W', '\x3', '\x2', '\x2', 
		'\x2', ']', '\a', '\x3', '\x2', '\x2', '\x2', '^', '\x63', '\a', '\x1F', 
		'\x2', '\x2', '_', '`', '\a', '\xE', '\x2', '\x2', '`', '\x62', '\a', 
		'\x1F', '\x2', '\x2', '\x61', '_', '\x3', '\x2', '\x2', '\x2', '\x62', 
		'\x65', '\x3', '\x2', '\x2', '\x2', '\x63', '\x61', '\x3', '\x2', '\x2', 
		'\x2', '\x63', '\x64', '\x3', '\x2', '\x2', '\x2', '\x64', '\t', '\x3', 
		'\x2', '\x2', '\x2', '\x65', '\x63', '\x3', '\x2', '\x2', '\x2', '\x66', 
		'l', '\a', '$', '\x2', '\x2', 'g', 'i', '\a', '\x1F', '\x2', '\x2', 'h', 
		'j', '\x5', '\f', '\a', '\x2', 'i', 'h', '\x3', '\x2', '\x2', '\x2', 'i', 
		'j', '\x3', '\x2', '\x2', '\x2', 'j', 'l', '\x3', '\x2', '\x2', '\x2', 
		'k', '\x66', '\x3', '\x2', '\x2', '\x2', 'k', 'g', '\x3', '\x2', '\x2', 
		'\x2', 'l', '\v', '\x3', '\x2', '\x2', '\x2', 'm', 'n', '\a', '\f', '\x2', 
		'\x2', 'n', 'p', '\a', '\x1F', '\x2', '\x2', 'o', 'm', '\x3', '\x2', '\x2', 
		'\x2', 'p', 'q', '\x3', '\x2', '\x2', '\x2', 'q', 'o', '\x3', '\x2', '\x2', 
		'\x2', 'q', 'r', '\x3', '\x2', '\x2', '\x2', 'r', '\r', '\x3', '\x2', 
		'\x2', '\x2', 's', 't', '\a', '\x3', '\x2', '\x2', 't', 'w', '\a', '\x1F', 
		'\x2', '\x2', 'u', 'v', '\a', '\x1B', '\x2', '\x2', 'v', 'x', '\x5', '\x10', 
		'\t', '\x2', 'w', 'u', '\x3', '\x2', '\x2', '\x2', 'w', 'x', '\x3', '\x2', 
		'\x2', '\x2', 'x', 'y', '\x3', '\x2', '\x2', '\x2', 'y', '\x7F', '\a', 
		'\x15', '\x2', '\x2', 'z', '{', '\x5', '\x12', '\n', '\x2', '{', '|', 
		'\a', '\x1A', '\x2', '\x2', '|', '~', '\x3', '\x2', '\x2', '\x2', '}', 
		'z', '\x3', '\x2', '\x2', '\x2', '~', '\x81', '\x3', '\x2', '\x2', '\x2', 
		'\x7F', '}', '\x3', '\x2', '\x2', '\x2', '\x7F', '\x80', '\x3', '\x2', 
		'\x2', '\x2', '\x80', '\x82', '\x3', '\x2', '\x2', '\x2', '\x81', '\x7F', 
		'\x3', '\x2', '\x2', '\x2', '\x82', '\x83', '\a', '\x16', '\x2', '\x2', 
		'\x83', '\xF', '\x3', '\x2', '\x2', '\x2', '\x84', '\x89', '\a', '\x1F', 
		'\x2', '\x2', '\x85', '\x86', '\a', '\x1F', '\x2', '\x2', '\x86', '\x87', 
		'\a', '\x12', '\x2', '\x2', '\x87', '\x89', '\x5', '\x10', '\t', '\x2', 
		'\x88', '\x84', '\x3', '\x2', '\x2', '\x2', '\x88', '\x85', '\x3', '\x2', 
		'\x2', '\x2', '\x89', '\x11', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x8D', 
		'\x5', '\x18', '\r', '\x2', '\x8B', '\x8D', '\x5', '\x1C', '\xF', '\x2', 
		'\x8C', '\x8A', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x8B', '\x3', '\x2', 
		'\x2', '\x2', '\x8D', '\x13', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x8F', 
		'\a', '\x4', '\x2', '\x2', '\x8F', '\x90', '\a', '\x1F', '\x2', '\x2', 
		'\x90', '\x96', '\a', '\x15', '\x2', '\x2', '\x91', '\x92', '\x5', '\x16', 
		'\f', '\x2', '\x92', '\x93', '\a', '\x1A', '\x2', '\x2', '\x93', '\x95', 
		'\x3', '\x2', '\x2', '\x2', '\x94', '\x91', '\x3', '\x2', '\x2', '\x2', 
		'\x95', '\x98', '\x3', '\x2', '\x2', '\x2', '\x96', '\x94', '\x3', '\x2', 
		'\x2', '\x2', '\x96', '\x97', '\x3', '\x2', '\x2', '\x2', '\x97', '\x99', 
		'\x3', '\x2', '\x2', '\x2', '\x98', '\x96', '\x3', '\x2', '\x2', '\x2', 
		'\x99', '\x9A', '\a', '\x16', '\x2', '\x2', '\x9A', '\x15', '\x3', '\x2', 
		'\x2', '\x2', '\x9B', '\x9E', '\x5', '\x12', '\n', '\x2', '\x9C', '\x9E', 
		'\x5', '&', '\x14', '\x2', '\x9D', '\x9B', '\x3', '\x2', '\x2', '\x2', 
		'\x9D', '\x9C', '\x3', '\x2', '\x2', '\x2', '\x9E', '\x17', '\x3', '\x2', 
		'\x2', '\x2', '\x9F', '\xA0', '\a', '\x1F', '\x2', '\x2', '\xA0', '\xA2', 
		'\a', '\xF', '\x2', '\x2', '\xA1', '\xA3', '\x5', '\x1A', '\xE', '\x2', 
		'\xA2', '\xA1', '\x3', '\x2', '\x2', '\x2', '\xA2', '\xA3', '\x3', '\x2', 
		'\x2', '\x2', '\xA3', '\xA4', '\x3', '\x2', '\x2', '\x2', '\xA4', '\xA6', 
		'\a', '\x10', '\x2', '\x2', '\xA5', '\xA7', '\x5', '\"', '\x12', '\x2', 
		'\xA6', '\xA5', '\x3', '\x2', '\x2', '\x2', '\xA6', '\xA7', '\x3', '\x2', 
		'\x2', '\x2', '\xA7', '\x19', '\x3', '\x2', '\x2', '\x2', '\xA8', '\xAE', 
		'\x5', '&', '\x14', '\x2', '\xA9', '\xAA', '\x5', '&', '\x14', '\x2', 
		'\xAA', '\xAB', '\a', '\x12', '\x2', '\x2', '\xAB', '\xAC', '\x5', '\x1A', 
		'\xE', '\x2', '\xAC', '\xAE', '\x3', '\x2', '\x2', '\x2', '\xAD', '\xA8', 
		'\x3', '\x2', '\x2', '\x2', '\xAD', '\xA9', '\x3', '\x2', '\x2', '\x2', 
		'\xAE', '\x1B', '\x3', '\x2', '\x2', '\x2', '\xAF', '\xB0', '\a', '\x1F', 
		'\x2', '\x2', '\xB0', '\xB1', '\a', '\x1B', '\x2', '\x2', '\xB1', '\xB2', 
		'\x5', '\x1E', '\x10', '\x2', '\xB2', '\x1D', '\x3', '\x2', '\x2', '\x2', 
		'\xB3', '\xB8', '\a', '\x1F', '\x2', '\x2', '\xB4', '\xB5', '\a', '\x1F', 
		'\x2', '\x2', '\xB5', '\xB6', '\a', '\x12', '\x2', '\x2', '\xB6', '\xB8', 
		'\x5', '\x1E', '\x10', '\x2', '\xB7', '\xB3', '\x3', '\x2', '\x2', '\x2', 
		'\xB7', '\xB4', '\x3', '\x2', '\x2', '\x2', '\xB8', '\x1F', '\x3', '\x2', 
		'\x2', '\x2', '\xB9', '\xBA', '\a', '\x6', '\x2', '\x2', '\xBA', '\xBB', 
		'\a', '\x1F', '\x2', '\x2', '\xBB', '!', '\x3', '\x2', '\x2', '\x2', '\xBC', 
		'\xC0', '\t', '\x2', '\x2', '\x2', '\xBD', '\xBE', '\t', '\x2', '\x2', 
		'\x2', '\xBE', '\xC0', '\x5', '\"', '\x12', '\x2', '\xBF', '\xBC', '\x3', 
		'\x2', '\x2', '\x2', '\xBF', '\xBD', '\x3', '\x2', '\x2', '\x2', '\xC0', 
		'#', '\x3', '\x2', '\x2', '\x2', '\xC1', '\xC2', '\a', '\x5', '\x2', '\x2', 
		'\xC2', '\xC3', '\x5', '&', '\x14', '\x2', '\xC3', '%', '\x3', '\x2', 
		'\x2', '\x2', '\xC4', '\xC6', '\t', '\x3', '\x2', '\x2', '\xC5', '\xC7', 
		'\x5', '*', '\x16', '\x2', '\xC6', '\xC5', '\x3', '\x2', '\x2', '\x2', 
		'\xC6', '\xC7', '\x3', '\x2', '\x2', '\x2', '\xC7', '\xCA', '\x3', '\x2', 
		'\x2', '\x2', '\xC8', '\xC9', '\a', '\r', '\x2', '\x2', '\xC9', '\xCB', 
		'\a', ' ', '\x2', '\x2', '\xCA', '\xC8', '\x3', '\x2', '\x2', '\x2', '\xCA', 
		'\xCB', '\x3', '\x2', '\x2', '\x2', '\xCB', '\xCE', '\x3', '\x2', '\x2', 
		'\x2', '\xCC', '\xCD', '\a', '\f', '\x2', '\x2', '\xCD', '\xCF', '\a', 
		' ', '\x2', '\x2', '\xCE', '\xCC', '\x3', '\x2', '\x2', '\x2', '\xCE', 
		'\xCF', '\x3', '\x2', '\x2', '\x2', '\xCF', '\xD1', '\x3', '\x2', '\x2', 
		'\x2', '\xD0', '\xD2', '\a', '\x1F', '\x2', '\x2', '\xD1', '\xD0', '\x3', 
		'\x2', '\x2', '\x2', '\xD1', '\xD2', '\x3', '\x2', '\x2', '\x2', '\xD2', 
		'\xD4', '\x3', '\x2', '\x2', '\x2', '\xD3', '\xD5', '\x5', '(', '\x15', 
		'\x2', '\xD4', '\xD3', '\x3', '\x2', '\x2', '\x2', '\xD4', '\xD5', '\x3', 
		'\x2', '\x2', '\x2', '\xD5', '\xD7', '\x3', '\x2', '\x2', '\x2', '\xD6', 
		'\xD8', '\x5', '\x30', '\x19', '\x2', '\xD7', '\xD6', '\x3', '\x2', '\x2', 
		'\x2', '\xD7', '\xD8', '\x3', '\x2', '\x2', '\x2', '\xD8', '\'', '\x3', 
		'\x2', '\x2', '\x2', '\xD9', '\xDB', '\a', '\x13', '\x2', '\x2', '\xDA', 
		'\xDC', '\x5', '.', '\x18', '\x2', '\xDB', '\xDA', '\x3', '\x2', '\x2', 
		'\x2', '\xDB', '\xDC', '\x3', '\x2', '\x2', '\x2', '\xDC', '\xDD', '\x3', 
		'\x2', '\x2', '\x2', '\xDD', '\xE5', '\a', '\x14', '\x2', '\x2', '\xDE', 
		'\xE0', '\a', '\x13', '\x2', '\x2', '\xDF', '\xE1', '\x5', '.', '\x18', 
		'\x2', '\xE0', '\xDF', '\x3', '\x2', '\x2', '\x2', '\xE0', '\xE1', '\x3', 
		'\x2', '\x2', '\x2', '\xE1', '\xE2', '\x3', '\x2', '\x2', '\x2', '\xE2', 
		'\xE3', '\a', '\x14', '\x2', '\x2', '\xE3', '\xE5', '\x5', '(', '\x15', 
		'\x2', '\xE4', '\xD9', '\x3', '\x2', '\x2', '\x2', '\xE4', '\xDE', '\x3', 
		'\x2', '\x2', '\x2', '\xE5', ')', '\x3', '\x2', '\x2', '\x2', '\xE6', 
		'\xE7', '\a', '\xF', '\x2', '\x2', '\xE7', '\xE8', '\x5', ',', '\x17', 
		'\x2', '\xE8', '\xE9', '\a', '\x10', '\x2', '\x2', '\xE9', '+', '\x3', 
		'\x2', '\x2', '\x2', '\xEA', '\xEF', '\x5', '.', '\x18', '\x2', '\xEB', 
		'\xEC', '\a', '\x12', '\x2', '\x2', '\xEC', '\xEE', '\x5', '.', '\x18', 
		'\x2', '\xED', '\xEB', '\x3', '\x2', '\x2', '\x2', '\xEE', '\xF1', '\x3', 
		'\x2', '\x2', '\x2', '\xEF', '\xED', '\x3', '\x2', '\x2', '\x2', '\xEF', 
		'\xF0', '\x3', '\x2', '\x2', '\x2', '\xF0', '-', '\x3', '\x2', '\x2', 
		'\x2', '\xF1', '\xEF', '\x3', '\x2', '\x2', '\x2', '\xF2', '\xF8', '\a', 
		' ', '\x2', '\x2', '\xF3', '\xF8', '\a', '\x1D', '\x2', '\x2', '\xF4', 
		'\xF5', '\a', ' ', '\x2', '\x2', '\xF5', '\xF6', '\a', '\x11', '\x2', 
		'\x2', '\xF6', '\xF8', '\a', ' ', '\x2', '\x2', '\xF7', '\xF2', '\x3', 
		'\x2', '\x2', '\x2', '\xF7', '\xF3', '\x3', '\x2', '\x2', '\x2', '\xF7', 
		'\xF4', '\x3', '\x2', '\x2', '\x2', '\xF8', '/', '\x3', '\x2', '\x2', 
		'\x2', '\xF9', '\xFA', '\a', '\x19', '\x2', '\x2', '\xFA', '\xFB', '\x5', 
		'\x32', '\x1A', '\x2', '\xFB', '\x31', '\x3', '\x2', '\x2', '\x2', '\xFC', 
		'\x101', '\x5', '\x34', '\x1B', '\x2', '\xFD', '\x101', '\x5', '\x36', 
		'\x1C', '\x2', '\xFE', '\x101', '\x5', '\x38', '\x1D', '\x2', '\xFF', 
		'\x101', '\x5', ':', '\x1E', '\x2', '\x100', '\xFC', '\x3', '\x2', '\x2', 
		'\x2', '\x100', '\xFD', '\x3', '\x2', '\x2', '\x2', '\x100', '\xFE', '\x3', 
		'\x2', '\x2', '\x2', '\x100', '\xFF', '\x3', '\x2', '\x2', '\x2', '\x101', 
		'\x33', '\x3', '\x2', '\x2', '\x2', '\x102', '\x103', '\a', ' ', '\x2', 
		'\x2', '\x103', '\x35', '\x3', '\x2', '\x2', '\x2', '\x104', '\x105', 
		'\t', '\x4', '\x2', '\x2', '\x105', '\x37', '\x3', '\x2', '\x2', '\x2', 
		'\x106', '\x107', '\a', '\x15', '\x2', '\x2', '\x107', '\x10C', '\x5', 
		'\x32', '\x1A', '\x2', '\x108', '\x109', '\a', '\x12', '\x2', '\x2', '\x109', 
		'\x10B', '\x5', '\x32', '\x1A', '\x2', '\x10A', '\x108', '\x3', '\x2', 
		'\x2', '\x2', '\x10B', '\x10E', '\x3', '\x2', '\x2', '\x2', '\x10C', '\x10A', 
		'\x3', '\x2', '\x2', '\x2', '\x10C', '\x10D', '\x3', '\x2', '\x2', '\x2', 
		'\x10D', '\x10F', '\x3', '\x2', '\x2', '\x2', '\x10E', '\x10C', '\x3', 
		'\x2', '\x2', '\x2', '\x10F', '\x110', '\a', '\x16', '\x2', '\x2', '\x110', 
		'\x39', '\x3', '\x2', '\x2', '\x2', '\x111', '\x11E', '\x3', '\x2', '\x2', 
		'\x2', '\x112', '\x113', '\a', '\x13', '\x2', '\x2', '\x113', '\x118', 
		'\x5', '<', '\x1F', '\x2', '\x114', '\x115', '\a', '\x12', '\x2', '\x2', 
		'\x115', '\x117', '\x5', '<', '\x1F', '\x2', '\x116', '\x114', '\x3', 
		'\x2', '\x2', '\x2', '\x117', '\x11A', '\x3', '\x2', '\x2', '\x2', '\x118', 
		'\x116', '\x3', '\x2', '\x2', '\x2', '\x118', '\x119', '\x3', '\x2', '\x2', 
		'\x2', '\x119', '\x11B', '\x3', '\x2', '\x2', '\x2', '\x11A', '\x118', 
		'\x3', '\x2', '\x2', '\x2', '\x11B', '\x11C', '\a', '\x14', '\x2', '\x2', 
		'\x11C', '\x11E', '\x3', '\x2', '\x2', '\x2', '\x11D', '\x111', '\x3', 
		'\x2', '\x2', '\x2', '\x11D', '\x112', '\x3', '\x2', '\x2', '\x2', '\x11E', 
		';', '\x3', '\x2', '\x2', '\x2', '\x11F', '\x125', '\x3', '\x2', '\x2', 
		'\x2', '\x120', '\x121', '\a', ' ', '\x2', '\x2', '\x121', '\x122', '\a', 
		'\v', '\x2', '\x2', '\x122', '\x125', '\a', ' ', '\x2', '\x2', '\x123', 
		'\x125', '\x5', '\x32', '\x1A', '\x2', '\x124', '\x11F', '\x3', '\x2', 
		'\x2', '\x2', '\x124', '\x120', '\x3', '\x2', '\x2', '\x2', '\x124', '\x123', 
		'\x3', '\x2', '\x2', '\x2', '\x125', '=', '\x3', '\x2', '\x2', '\x2', 
		'&', '\x41', 'G', 'N', 'Z', '\\', '\x63', 'i', 'k', 'q', 'w', '\x7F', 
		'\x88', '\x8C', '\x96', '\x9D', '\xA2', '\xA6', '\xAD', '\xB7', '\xBF', 
		'\xC6', '\xCA', '\xCE', '\xD1', '\xD4', '\xD7', '\xDB', '\xE0', '\xE4', 
		'\xEF', '\xF7', '\x100', '\x10C', '\x118', '\x11D', '\x124',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace DcSharp
